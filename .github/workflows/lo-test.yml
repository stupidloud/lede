# This is a basic workflow that is manually triggered

name: lo build test

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  repository_dispatch:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      device:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'select device to build'
        # Default value if no value is explicitly provided
        default: 'x86'
        # Input has to be provided for the workflow to run
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    name: ${{ github.event.client_payload.device }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          #docker rmi `docker images -q`
          sudo -E apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt update
          sudo -E apt -y install zstd build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool rsync swig
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
          df -h

      - name: Checkout
        run: |
          for i in {0..5}
          do
           wget -q https://github.com/klever1988/lede/releases/download/cache/lede.${{ github.event.client_payload.device }}.img.zst.0$i || true
          done
          cat lede.${{ github.event.client_payload.device }}.img.zst.0* | zstdmt -do lede.img || (truncate -s 30g lede.img && mkfs.xfs lede.img)
          LOOP_DEVICE=$(losetup -f) && echo $LOOP_DEVICE > LOOP_DEVICE
          sudo losetup -P --direct-io $LOOP_DEVICE lede.img 
          sudo rm -rf /mnt/lede && sudo mkdir -p /mnt/lede
          sudo mount $LOOP_DEVICE /mnt/lede && sudo mkdir -p /mnt/lede/lede && sudo chown $USER:$USER /mnt/lede/lede && mkdir lede
          sudo mount --bind /mnt/lede/lede ./lede
          [ ! -e lede/.git ] && (cd lede && git init && git remote add origin https://github.com/klever1988/lede && git pull origin master && git branch --set-upstream-to=origin/master master)
          cd lede && git config --local user.email "action@github.com" && git config --local user.name "GitHub Action" && git pull -X theirs

      - name: Update feeds
        run: |
          cd lede
          sed -i 's/#src-git helloworld/src-git helloworld/g' feeds.conf.default
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          rm -rf package/lean/luci-theme-argon && mv luci-theme-argon package/lean/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom configure file
        run: |
          cd lede
          rm -f .config*

          cp ${{ github.event.client_payload.device }}.config.seed .config || true

          sed -i 's/^[ \t]*//g' .config
          echo '
          # CONFIG_v2ray-plugin_INCLUDE_GOPROXY is not set
          # CONFIG_XRAY_CORE_COMPRESS_GOPROXY is not set
          # CONFIG_UnblockNeteaseMusicGo_INCLUDE_GOPROXY is not set
          ' >> .config
          make defconfig && cat .config

      - name: Make download
        run: |
          cd lede
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd lede
          make -j$(($(nproc) + 1)) -s || (make clean && make -j3 V=sc)
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          cd lede
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ../artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ../artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          rm -rf bin/ tmp/
          cd ..
          rm -f *zst*
          LOOP_DEVICE=$(cat LOOP_DEVICE)
          sudo umount ./lede
          sudo umount /mnt/lede
          sudo losetup -d $LOOP_DEVICE
          zstdmt -c -1 lede.img | split -d -b 2000m - lede.${{ github.event.client_payload.device }}.img.zst.

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./artifact/firmware/
  

      - name: Upload cache asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./lede.${{ github.event.client_payload.device }}*zst*
          tag: cache
          file_glob: true
          overwrite: true

      - name: send tg notification
        uses: appleboy/telegram-action@master
        if: always()
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          args: The ${{ github.event.client_payload.device }} build is finished at ${{ job.status }}.

