name: ci clean build test

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'select device to build'
        default: 'x86'
        required: false

jobs:

  build:
    name: ${{ github.event.inputs.device }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo sysctl vm.swappiness=0
          nohup sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk &
          sudo -E apt update
          nohup sudo -E apt -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool rsync swig &

      - name: Checkout
        run: |
          truncate -s 8g lede.img && mkfs.btrfs -M lede.img
          LOOP_DEVICE=$(losetup -f) && echo $LOOP_DEVICE > LOOP_DEVICE
          sudo losetup -P --direct-io $LOOP_DEVICE lede.img
          mkdir lede && sudo mount -o nossd,compress=zstd $LOOP_DEVICE lede
          [ ! -d 'lede/.git' ] && sudo chown -R $USER:$(id -gn) lede && (cd lede && git init && git remote add -t master -f origin https://github.com/${{ github.repository }} && git checkout master)

      - name: Update feeds
        run: |
          cd lede
          sed -i 's/#src-git helloworld/src-git helloworld/g' feeds.conf.default
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          rm -rf package/lean/luci-theme-argon && mv luci-theme-argon package/lean/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare to build
        run: |
          cd lede
          rm -f .config*
          cat ${{ github.event.inputs.device }}.config.seed > .config

          if [[ ${{ github.event.client_payload.device || github.event.inputs.device }} =~ ('r2s'|'r4s') ]]; then
            sdk_src='https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz'
          elif [[ ${{ github.event.client_payload.device || github.event.inputs.device }} =~ 'r1s'|'neo2' ]]; then
            sdk_src='https://downloads.openwrt.org/snapshots/targets/sunxi/cortexa53/openwrt-sdk-sunxi-cortexa53_gcc-8.4.0_musl.Linux-x86_64.tar.xz'
          elif [ ${{ github.event.client_payload.device || github.event.inputs.device }} == 'rpi4b' ]; then
            sdk_src='https://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2711/openwrt-sdk-bcm27xx-bcm2711_gcc-8.4.0_musl.Linux-x86_64.tar.xz'
          elif [ ${{ github.event.client_payload.device || github.event.inputs.device }} = 'x86' ]; then
            sdk_src='https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz'
          fi
          mkdir sdk && wget -qO- $sdk_src | tar -xJf - -C sdk
          mv sdk/*/build_dir ./ && rsync -a --ignore-existing sdk/*/staging_dir/ ./staging_dir/
          rm -rf sdk
          sed -i '/\(tools\|toolchain\)\/Makefile/d' Makefile
          echo -e '# CONFIG_SIGNED_PACKAGES is not set\n' >> .config
          grep -l -r --include=\Makefile '(STAGING_DIR_HOST)/bin/upx ' | xargs -n1 -i sed -i '/upx/d' {}

          make defconfig && cat .config

      - name: Compile firmware
        run: |
          cd lede
          while true; do make download -j && break || true; done
          while true; do make package/download -j && break || true; done
          make -j$(($(nproc) + 1)) || make V=sc
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          cd lede
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ../artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ../artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          rm -rf bin/ tmp/
          cd ..
          sudo umount lede
          LOOP_DEVICE=$(cat LOOP_DEVICE)
          sudo losetup -d $LOOP_DEVICE
          zstdmt -c --long lede.img | split -d -b 2000m - lede.${{ github.event.inputs.device }}.img.zst.
          ls -l *zst*

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./artifact/firmware/

      - name: Upload cache asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./lede.${{ github.event.inputs.device }}*zst*
          tag: cache
          file_glob: true
          overwrite: true
          prerelease: true

      - name: Start SSH via tmate
        uses: P3TERX/ssh2actions@main
        if: ${{ failure() }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Send tg notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          args: The ${{ github.event.inputs.device }} build is finished at ${{ job.status }}.
